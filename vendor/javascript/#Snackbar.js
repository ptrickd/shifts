import e from"@babel/runtime/helpers/esm/extends";import o from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as t from"react";import r from"prop-types";import{ClickAwayListener as n}from"@mui/base/ClickAwayListener";import{unstable_composeClasses as s}from"@mui/base/composeClasses";import{generateUtilityClass as i}from"@mui/base/generateUtilityClass";import{generateUtilityClasses as a}from"@mui/base/generateUtilityClasses";import{useSnackbar as l}from"@mui/base/useSnackbar";import{useSlotProps as u}from"@mui/base/utils";import{useClassNamesOverride as c}from"../utils/ClassNameConfigurator.js";import{jsx as m}from"react/jsx-runtime";function getSnackbarUtilityClass(e){return i("MuiSnackbar",e)}const p=a("MuiSnackbar",["root"]);"use client";const d=["autoHideDuration","children","disableWindowBlurListener","exited","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","slotProps","slots"];const useUtilityClasses=()=>{const e={root:["root"]};return s(e,c(getSnackbarUtilityClass))};const b=t.forwardRef((function Snackbar(t,r){const{autoHideDuration:s=null,children:i,disableWindowBlurListener:a=false,exited:c=true,onClose:p,open:b,resumeHideDuration:f,slotProps:y={},slots:w={}}=t,C=o(t,d);const h=useUtilityClasses();const{getRootProps:k,onClickAway:S}=l(e({},t,{autoHideDuration:s,disableWindowBlurListener:a,onClose:p,open:b,resumeHideDuration:f}));const P=t;const D=w.root||"div";const x=u({elementType:D,getSlotProps:k,externalForwardedProps:C,externalSlotProps:y.root,additionalProps:{ref:r},ownerState:P,className:h.root});const L=u({elementType:n,externalSlotProps:y.clickAwayListener,additionalProps:{onClickAway:S},ownerState:P});delete L.ownerState;return!b&&c?null:m(n,e({},L,{children:m(D,e({},x,{children:i}))}))}));process.env.NODE_ENV!=="production"?b.propTypes={autoHideDuration:r.number,children:r.node,disableWindowBlurListener:r.bool,exited:r.bool,
/**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
onClose:r.func,open:r.bool,resumeHideDuration:r.number,slotProps:r.shape({clickAwayListener:r.oneOfType([r.func,r.shape({children:r.element.isRequired,disableReactTree:r.bool,mouseEvent:r.oneOf(["onClick","onMouseDown","onMouseUp","onPointerDown","onPointerUp",false]),onClickAway:r.func,touchEvent:r.oneOf(["onTouchEnd","onTouchStart",false])})]),root:r.oneOfType([r.func,r.object])}),slots:r.shape({root:r.elementType})}:void 0;"use client";export{b as Snackbar,getSnackbarUtilityClass,p as snackbarClasses};

