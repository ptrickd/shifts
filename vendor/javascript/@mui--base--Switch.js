import e from"@babel/runtime/helpers/esm/extends";import t from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as o from"react";import s from"prop-types";import{unstable_composeClasses as n}from"@mui/base/composeClasses";import{useSwitch as r}from"@mui/base/useSwitch";import{useSlotProps as l}from"@mui/base/utils";import{useClassNamesOverride as c}from"../utils/ClassNameConfigurator.js";import{generateUtilityClass as i}from"@mui/base/generateUtilityClass";import{generateUtilityClasses as a}from"@mui/base/generateUtilityClasses";import{jsx as u,jsxs as p}from"react/jsx-runtime";function getSwitchUtilityClass(e){return i("MuiSwitch",e)}const m=a("MuiSwitch",["root","input","track","thumb","checked","disabled","focusVisible","readOnly"]);"use client";const d=["checked","defaultChecked","disabled","onBlur","onChange","onFocus","onFocusVisible","readOnly","required","slotProps","slots"];const useUtilityClasses=e=>{const{checked:t,disabled:o,focusVisible:s,readOnly:r}=e;const l={root:["root",t&&"checked",o&&"disabled",s&&"focusVisible",r&&"readOnly"],thumb:["thumb"],input:["input"],track:["track"]};return n(l,c(getSwitchUtilityClass))};const b=o.forwardRef((function Switch(o,s){var n,c,i,a;const{slotProps:m={},slots:b={}}=o,f=t(o,d);const{getInputProps:h,checked:y,disabled:k,focusVisible:S,readOnly:O}=r(o);const T=e({},o,{checked:y,disabled:k,focusVisible:S,readOnly:O});const w=useUtilityClasses(T);const C=(n=b.root)!=null?n:"span";const P=l({elementType:C,externalSlotProps:m.root,externalForwardedProps:f,additionalProps:{ref:s},ownerState:T,className:w.root});const g=(c=b.thumb)!=null?c:"span";const x=l({elementType:g,externalSlotProps:m.thumb,ownerState:T,className:w.thumb});const N=(i=b.input)!=null?i:"input";const V=l({elementType:N,getSlotProps:h,externalSlotProps:m.input,ownerState:T,className:w.input});const j=b.track===null?()=>null:(a=b.track)!=null?a:"span";const F=l({elementType:j,externalSlotProps:m.track,ownerState:T,className:w.track});return p(C,e({},P,{children:[u(j,e({},F)),u(g,e({},x)),u(N,e({},V))]}))}));process.env.NODE_ENV!=="production"?b.propTypes={checked:s.bool,className:s.string,defaultChecked:s.bool,disabled:s.bool,onBlur:s.func,
/**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
onChange:s.func,onFocus:s.func,onFocusVisible:s.func,readOnly:s.bool,required:s.bool,slotProps:s.shape({input:s.oneOfType([s.func,s.object]),root:s.oneOfType([s.func,s.object]),thumb:s.oneOfType([s.func,s.object]),track:s.oneOfType([s.func,s.object])}),slots:s/* @typescript-to-proptypes-ignore */.shape({input:s.elementType,root:s.elementType,thumb:s.elementType,track:s.oneOfType([s.elementType,s.oneOf([null])])})}:void 0;"use client";export{b as Switch,getSwitchUtilityClass,m as switchClasses};

