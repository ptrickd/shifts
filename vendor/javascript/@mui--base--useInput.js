import e from"@babel/runtime/helpers/esm/extends";import{unstable_useForkRef as o,formatMuiErrorMessage as n}from"@mui/utils";import*as r from"react";import{useFormControlContext as t}from"@mui/base/FormControl";import{e as l}from"../_/q-ZiAH4M.js";"use client";function useInput(u={}){const{defaultValue:s,disabled:a=false,error:i=false,onBlur:c,onChange:d,onFocus:p,required:f=false,value:m,inputRef:h}=u;const v=t();let g;let C;let b;let E;let F;if(v){var I,N,w;g=void 0;C=(I=v.disabled)!=null&&I;b=(N=v.error)!=null&&N;E=(w=v.required)!=null&&w;F=v.value;if(process.env.NODE_ENV!=="production"){const e=["defaultValue","disabled","error","required","value"].filter((e=>u[e]!==void 0));e.length>0&&console.warn(["MUI: You have set props on an input that is inside a FormControl.","Set these props on a FormControl instead. Otherwise they will be ignored.",`Ignored props: ${e.join(", ")}`].join("\n"))}}else{g=s;C=a;b=i;E=f;F=m}const{current:B}=r.useRef(F!=null);const V=r.useCallback((e=>{process.env.NODE_ENV!=="production"&&e&&e.nodeName!=="INPUT"&&!e.focus&&console.error(["MUI: You have provided a `slots.input` to the input component","that does not correctly handle the `ref` prop.","Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"))}),[]);const q=r.useRef(null);const M=o(q,h,V);const[R,j]=r.useState(false);r.useEffect((()=>{if(!v&&C&&R){j(false);c==null||c()}}),[v,C,R,c]);const handleFocus=e=>o=>{var n;if(v!=null&&v.disabled)o.stopPropagation();else{(n=e.onFocus)==null||n.call(e,o);if(v&&v.onFocus){var r;v==null||(r=v.onFocus)==null||r.call(v)}else j(true)}};const handleBlur=e=>o=>{var n;(n=e.onBlur)==null||n.call(e,o);v&&v.onBlur?v.onBlur():j(false)};const handleChange=e=>(o,...r)=>{var t,l;if(!B){const e=o.target||q.current;if(e==null)throw new Error(process.env.NODE_ENV!=="production"?"MUI: Expected valid input target. Did you use a custom `slots.input` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.":n(17))}v==null||(t=v.onChange)==null||t.call(v,o);(l=e.onChange)==null||l.call(e,o,...r)};const handleClick=e=>o=>{var n;q.current&&o.currentTarget===o.target&&q.current.focus();(n=e.onClick)==null||n.call(e,o)};const getRootProps=(o={})=>{const n=l(u,["onBlur","onChange","onFocus"]);const r=e({},n,l(o));return e({},o,r,{onClick:handleClick(r)})};const getInputProps=(o={})=>{const n={onBlur:c,onChange:d,onFocus:p};const r=e({},n,l(o));const t=e({},r,{onBlur:handleBlur(r),onChange:handleChange(r),onFocus:handleFocus(r)});return e({},t,{"aria-invalid":b||void 0,defaultValue:g,value:F,required:E,disabled:C},o,{ref:M},t)};return{disabled:C,error:b,focused:R,formControlContext:v,getInputProps:getInputProps,getRootProps:getRootProps,inputRef:M,required:E,value:F}}"use client";export{useInput};

