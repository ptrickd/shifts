import e from"@babel/runtime/helpers/esm/extends";import t from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as n from"react";import o from"prop-types";import{generateUtilityClass as r}from"@mui/base/generateUtilityClass";import{generateUtilityClasses as s}from"@mui/base/generateUtilityClasses";import{unstable_useNumberInput as l}from"#unstable_useNumberInput";import{unstable_composeClasses as a}from"@mui/base/composeClasses";import{useSlotProps as u}from"@mui/base/utils";import{useClassNamesOverride as i}from"../utils/ClassNameConfigurator.js";import{jsx as m,jsxs as d}from"react/jsx-runtime";function getNumberInputUtilityClass(e){return r("MuiNumberInput",e)}const p=s("MuiNumberInput",["root","formControl","focused","disabled","readOnly","error","input","incrementButton","decrementButton","adornedStart","adornedEnd"]);"use client";const c=["className","defaultValue","disabled","endAdornment","error","id","max","min","onBlur","onInputChange","onFocus","onChange","placeholder","required","readOnly","shiftMultiplier","startAdornment","step","value","slotProps","slots"];const useUtilityClasses=e=>{const{disabled:t,error:n,focused:o,readOnly:r,formControlContext:s,isIncrementDisabled:l,isDecrementDisabled:u,startAdornment:m,endAdornment:d}=e;const p={root:["root",t&&"disabled",n&&"error",o&&"focused",r&&"readOnly",Boolean(s)&&"formControl",Boolean(m)&&"adornedStart",Boolean(d)&&"adornedEnd"],input:["input",t&&"disabled",r&&"readOnly"],incrementButton:["incrementButton",l&&"disabled"],decrementButton:["decrementButton",u&&"disabled"]};return a(p,i(getNumberInputUtilityClass))};const b=n.forwardRef((function NumberInput(n,o){var r,s,a,i;const{className:p,defaultValue:b,disabled:f,endAdornment:y,error:g,id:B,max:C,min:h,onBlur:I,onInputChange:N,onFocus:P,onChange:x,placeholder:O,required:S,readOnly:T=false,shiftMultiplier:D,startAdornment:v,step:A,value:j,slotProps:w={},slots:M={}}=n,U=t(n,c);const{getRootProps:F,getInputProps:V,getIncrementButtonProps:q,getDecrementButtonProps:E,focused:_,error:R,disabled:L,formControlContext:W,isIncrementDisabled:k,isDecrementDisabled:z}=l({min:h,max:C,step:A,shiftMultiplier:D,defaultValue:b,disabled:f,error:g,onFocus:P,onInputChange:N,onBlur:I,onChange:x,required:S,readOnly:T,value:j,inputId:B});const G=e({},n,{disabled:L,error:R,focused:_,readOnly:T,formControlContext:W,isIncrementDisabled:k,isDecrementDisabled:z});const H=useUtilityClasses(G);const J={placeholder:O};const K=(r=M.root)!=null?r:"div";const Q=u({elementType:K,getSlotProps:F,externalSlotProps:w.root,externalForwardedProps:U,additionalProps:{ref:o},ownerState:G,className:[H.root,p]});const X=(s=M.input)!=null?s:"input";const Y=u({elementType:X,getSlotProps:t=>V(e({},t,J)),externalSlotProps:w.input,ownerState:G,className:H.input});const Z=(a=M.incrementButton)!=null?a:"button";const $=u({elementType:Z,getSlotProps:q,externalSlotProps:w.incrementButton,ownerState:G,className:H.incrementButton});const ee=(i=M.decrementButton)!=null?i:"button";const te=u({elementType:ee,getSlotProps:E,externalSlotProps:w.decrementButton,ownerState:G,className:H.decrementButton});return d(K,e({},Q,{children:[m(ee,e({},te)),m(Z,e({},$)),v,m(X,e({},Y)),y]}))}));process.env.NODE_ENV!=="production"?b.propTypes={children:o.node,className:o.string,defaultValue:o.any,disabled:o.bool,endAdornment:o.node,error:o.bool,id:o.string,max:o.number,min:o.number,onBlur:o.func,
/**
   * Callback fired after the value is clamped and changes - when the `input` is blurred or when
   * the stepper buttons are triggered.
   * Called with `undefined` when the value is unset.
   *
   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback
   * @param {number|undefined} value The new value of the component
   */
onChange:o.func,onFocus:o.func,
/**
   * Callback fired when the `input` value changes after each keypress, before clamping is applied.
   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or
   * are otherwise "invalid".
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   */
onInputChange:o.func,placeholder:o.string,readOnly:o.bool,required:o.bool,shiftMultiplier:o.number,slotProps:o.shape({decrementButton:o.oneOfType([o.func,o.object]),incrementButton:o.oneOfType([o.func,o.object]),input:o.oneOfType([o.func,o.object]),root:o.oneOfType([o.func,o.object])}),slots:o.shape({decrementButton:o.elementType,incrementButton:o.elementType,input:o.elementType,root:o.elementType}),startAdornment:o.node,step:o.number,value:o.any}:void 0;"use client";export{b as Unstable_NumberInput,getNumberInputUtilityClass,p as numberInputClasses};

