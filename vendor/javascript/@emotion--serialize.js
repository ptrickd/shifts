import e from"@emotion/hash";import n from"@emotion/unitless";import r from"@emotion/memoize";var t="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";var o="You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";var a=/[A-Z]|^ms/g;var i=/_EMO_([^_]+?)_([^]*?)_EMO_/g;var s=function isCustomProperty(e){return e.charCodeAt(1)===45};var l=function isProcessableValue(e){return e!=null&&typeof e!=="boolean"};var c=r((function(e){return s(e)?e:e.replace(a,"-$&").toLowerCase()}));var u=function processStyleValue(e,r){switch(e){case"animation":case"animationName":if(typeof r==="string")return r.replace(i,(function(e,n,r){N={name:n,styles:r,next:N};return n}))}return n[e]===1||s(e)||typeof r!=="number"||r===0?r:r+"px"};if(process.env.NODE_ENV!=="production"){var p=/(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;var v=["normal","none","initial","inherit","unset"];var d=u;var f=/^-ms-/;var m=/-(.)/g;var h={};u=function processStyleValue(e,n){if(e==="content"&&(typeof n!=="string"||v.indexOf(n)===-1&&!p.test(n)&&(n.charAt(0)!==n.charAt(n.length-1)||n.charAt(0)!=='"'&&n.charAt(0)!=="'")))throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\""+n+"\"'`");var r=d(e,n);if(r!==""&&!s(e)&&e.indexOf("-")!==-1&&h[e]===void 0){h[e]=true;console.error("Using kebab-case for css properties in objects is not supported. Did you mean "+e.replace(f,"ms-").replace(m,(function(e,n){return n.toUpperCase()}))+"?")}return r}}var y="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function handleInterpolation(e,n,r){if(r==null)return"";if(r.__emotion_styles!==void 0){if(process.env.NODE_ENV!=="production"&&r.toString()==="NO_COMPONENT_SELECTOR")throw new Error(y);return r}switch(typeof r){case"boolean":return"";case"object":if(r.anim===1){N={name:r.name,styles:r.styles,next:N};return r.name}if(r.styles!==void 0){var t=r.next;if(t!==void 0)while(t!==void 0){N={name:t.name,styles:t.styles,next:N};t=t.next}var o=r.styles+";";process.env.NODE_ENV!=="production"&&r.map!==void 0&&(o+=r.map);return o}return createStringFromObject(e,n,r);case"function":if(e!==void 0){var a=N;var s=r(e);N=a;return handleInterpolation(e,n,s)}process.env.NODE_ENV!=="production"&&console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");break;case"string":if(process.env.NODE_ENV!=="production"){var l=[];var c=r.replace(i,(function(e,n,r){var t="animation"+l.length;l.push("const "+t+" = keyframes`"+r.replace(/^@keyframes animation-\w+/,"")+"`");return"${"+t+"}"}));l.length&&console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n"+[].concat(l,["`"+c+"`"]).join("\n")+"\n\nYou should wrap it with `css` like this:\n\ncss`"+c+"`")}break}if(n==null)return r;var u=n[r];return u!==void 0?u:r}function createStringFromObject(e,n,r){var t="";if(Array.isArray(r))for(var a=0;a<r.length;a++)t+=handleInterpolation(e,n,r[a])+";";else for(var i in r){var s=r[i];if(typeof s!=="object")n!=null&&n[s]!==void 0?t+=i+"{"+n[s]+"}":l(s)&&(t+=c(i)+":"+u(i,s)+";");else{if(i==="NO_COMPONENT_SELECTOR"&&process.env.NODE_ENV!=="production")throw new Error(y);if(!Array.isArray(s)||typeof s[0]!=="string"||n!=null&&n[s[0]]!==void 0){var p=handleInterpolation(e,n,s);switch(i){case"animation":case"animationName":t+=c(i)+":"+p+";";break;default:process.env.NODE_ENV!=="production"&&i==="undefined"&&console.error(o);t+=i+"{"+p+"}"}}else for(var v=0;v<s.length;v++)l(s[v])&&(t+=c(i)+":"+u(i,s[v])+";")}}return t}var g=/label:\s*([^\s;\n{]+)\s*(;|$)/g;var E;process.env.NODE_ENV!=="production"&&(E=/\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g);var N;var b=function serializeStyles(n,r,o){if(n.length===1&&typeof n[0]==="object"&&n[0]!==null&&n[0].styles!==void 0)return n[0];var a=true;var i="";N=void 0;var s=n[0];if(s==null||s.raw===void 0){a=false;i+=handleInterpolation(o,r,s)}else{process.env.NODE_ENV!=="production"&&s[0]===void 0&&console.error(t);i+=s[0]}for(var l=1;l<n.length;l++){i+=handleInterpolation(o,r,n[l]);if(a){process.env.NODE_ENV!=="production"&&s[l]===void 0&&console.error(t);i+=s[l]}}var c;process.env.NODE_ENV!=="production"&&(i=i.replace(E,(function(e){c=e;return""})));g.lastIndex=0;var u="";var p;while((p=g.exec(i))!==null)u+="-"+p[1];var v=e(i)+u;return process.env.NODE_ENV!=="production"?{name:v,styles:i,map:c,next:N,toString:function toString(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}}:{name:v,styles:i,next:N}};export{b as serializeStyles};

