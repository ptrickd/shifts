function getTypeByValue(e){const r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":Number.isFinite(e)?e!==Math.floor(e)?"float":"number":"Infinity";case"object":return e===null?"null":e.constructor.name;default:return r}}function ponyfillIsInteger(e){return typeof e==="number"&&isFinite(e)&&Math.floor(e)===e}const e=Number.isInteger||ponyfillIsInteger;function requiredInteger(r,t,n,o){const i=r[t];if(i==null||!e(i)){const e=getTypeByValue(i);return new RangeError(`Invalid ${o} \`${t}\` of type \`${e}\` supplied to \`${n}\`, expected \`integer\`.`)}return null}function validator(e,r,...t){const n=e[r];return n===void 0?null:requiredInteger(e,r,...t)}function validatorNoop(){return null}validator.isRequired=requiredInteger;validatorNoop.isRequired=validatorNoop;var r=process.env.NODE_ENV==="production"?validatorNoop:validator;export{r as default,getTypeByValue};

