import e from"@babel/runtime/helpers/esm/extends";import*as r from"react";import o from"prop-types";import{exactProp as t}from"@mui/utils";import{T as n}from"../_/pl40Z8vz.js";import i from"@mui/private-theming/useTheme";import m from"./nested.js";import{jsx as s}from"react/jsx-runtime";function mergeOuterLocalTheme(r,o){if(typeof o==="function"){const e=o(r);process.env.NODE_ENV!=="production"&&(e||console.error(["MUI: You should return an object from your theme function, i.e.","<ThemeProvider theme={() => ({})} />"].join("\n")));return e}return e({},r,o)}function ThemeProvider(e){const{children:o,theme:t}=e;const p=i();process.env.NODE_ENV!=="production"&&p===null&&typeof t==="function"&&console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:","<ThemeProvider theme={outerTheme => outerTheme} />","","However, no outer theme is present.","Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));const u=r.useMemo((()=>{const e=p===null?t:mergeOuterLocalTheme(p,t);e!=null&&(e[m]=p!==null);return e}),[t,p]);return s(n.Provider,{value:u,children:o})}process.env.NODE_ENV!=="production"?ThemeProvider.propTypes={children:o.node,theme:o.oneOfType([o.object,o.func]).isRequired}:void 0;process.env.NODE_ENV!=="production"&&(process.env.NODE_ENV!=="production"?ThemeProvider.propTypes=t(ThemeProvider.propTypes):void 0);export{ThemeProvider as default,m as unstable_nested};

