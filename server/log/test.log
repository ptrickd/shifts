  [1m[35m (65.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "shifts_test"[0m
  [1m[35m (495.0ms)[0m  [1m[35mCREATE DATABASE "shifts_test" ENCODING = 'unicode'[0m
  [1m[35mSQL (1.1ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE IF EXISTS "employees" CASCADE[0m
  [1m[35m (20.4ms)[0m  [1m[35mCREATE TABLE "employees" ("id" bigserial primary key, "is_active" boolean, "position" character varying, "first_name" character varying, "last_name" character varying, "display_name" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE IF EXISTS "requests" CASCADE[0m
  [1m[35m (16.8ms)[0m  [1m[35mCREATE TABLE "requests" ("id" bigserial primary key, "employee_id" bigint, "date" date, "category" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE IF EXISTS "shifts" CASCADE[0m
  [1m[35m (18.1ms)[0m  [1m[35mCREATE TABLE "shifts" ("id" bigserial primary key, "employee_id" bigint, "date" date, "start_time" time, "end_time" time, "is_split_shift" boolean, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL, "week_start" date)[0m
  [1m[35m (21.3ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL PRIMARY KEY)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (6.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES (20231114130230)[0m
  [1m[35m (7.0ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES
(20231107211017),
(20231107212849),
(20231107213524),
(20231108044231);

[0m
  [1m[35m (6.9ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" character varying NOT NULL PRIMARY KEY, "value" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Create (0.4ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "key"[0m  [["key", "environment"], ["value", "test"], ["created_at", "2024-02-07 13:34:21.347426"], ["updated_at", "2024-02-07 13:34:21.347426"]]
  [1m[36mTRANSACTION (7.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "schema_sha1"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Create (0.3ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "key"[0m  [["key", "schema_sha1"], ["value", "3c497c80e1aa5987198495ed4fb0a2e01b039762"], ["created_at", "2024-02-07 13:34:21.371258"], ["updated_at", "2024-02-07 13:34:21.371258"]]
  [1m[36mTRANSACTION (7.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "employees" DISABLE TRIGGER ALL;ALTER TABLE "requests" DISABLE TRIGGER ALL;ALTER TABLE "shifts" DISABLE TRIGGER ALL;ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "ar_internal_metadata" DISABLE TRIGGER ALL[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.0ms)[0m  [1m[31mDELETE FROM "employees";
DELETE FROM "requests";
DELETE FROM "shifts";
INSERT INTO "employees" ("id", "is_active", "position", "first_name", "last_name", "display_name", "created_at", "updated_at") VALUES (980190962, FALSE, '1', 'MyString', 'MyString', 'MyString', '2024-02-07 13:34:21.515312', '2024-02-07 13:34:21.515312'), (298486374, FALSE, '1', 'MyString', 'MyString', 'MyString', '2024-02-07 13:34:21.515312', '2024-02-07 13:34:21.515312');
INSERT INTO "requests" ("id", "employee_id", "date", "category", "created_at", "updated_at") VALUES (980190962, NULL, '2023-11-07', 'MyString', '2024-02-07 13:34:21.519988', '2024-02-07 13:34:21.519988'), (298486374, NULL, '2023-11-07', 'MyString', '2024-02-07 13:34:21.519988', '2024-02-07 13:34:21.519988');
INSERT INTO "shifts" ("id", "employee_id", "date", "start_time", "end_time", "is_split_shift", "created_at", "updated_at", "week_start") VALUES (980190962, NULL, '2023-11-07', '14:35:24', '14:35:24', FALSE, '2024-02-07 13:34:21.523502', '2024-02-07 13:34:21.523502', DEFAULT), (298486374, NULL, '2023-11-07', '14:35:24', '14:35:24', FALSE, '2024-02-07 13:34:21.523502', '2024-02-07 13:34:21.523502', DEFAULT)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "employees" ENABLE TRIGGER ALL;ALTER TABLE "requests" ENABLE TRIGGER ALL;ALTER TABLE "shifts" ENABLE TRIGGER ALL;ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "ar_internal_metadata" ENABLE TRIGGER ALL[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (5.0ms)[0m  [1m[35mdo $$
  declare r record;
BEGIN
FOR r IN (
  SELECT FORMAT(
    'UPDATE pg_constraint SET convalidated=false WHERE conname = ''%I'' AND connamespace::regnamespace = ''%I''::regnamespace; ALTER TABLE %I.%I VALIDATE CONSTRAINT %I;',
    constraint_name,
    table_schema,
    table_schema,
    table_name,
    constraint_name
  ) AS constraint_check
  FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY'
)
  LOOP
    EXECUTE (r.constraint_check);
  END LOOP;
END;
$$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
--------------------------------------------------
EmployeesControllerTest: test_should_show_employee
--------------------------------------------------
  [1m[36mEmployee Load (0.2ms)[0m  [1m[34mSELECT "employees".* FROM "employees" WHERE "employees"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
----------------------------------------------------
EmployeesControllerTest: test_should_update_employee
----------------------------------------------------
  [1m[36mEmployee Load (0.2ms)[0m  [1m[34mSELECT "employees".* FROM "employees" WHERE "employees"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
----------------------------------------------
EmployeesControllerTest: test_should_get_index
----------------------------------------------
  [1m[36mEmployee Load (0.3ms)[0m  [1m[34mSELECT "employees".* FROM "employees" WHERE "employees"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
----------------------------------------------------
EmployeesControllerTest: test_should_create_employee
----------------------------------------------------
  [1m[36mEmployee Load (0.6ms)[0m  [1m[34mSELECT "employees".* FROM "employees" WHERE "employees"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mEmployee Count (0.3ms)[0m  [1m[34mSELECT COUNT(*) FROM "employees"[0m
EmployeesControllerTest - test_should_create_employee: NameError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
-----------------------------------------------------
EmployeesControllerTest: test_should_destroy_employee
-----------------------------------------------------
  [1m[36mEmployee Load (0.2ms)[0m  [1m[34mSELECT "employees".* FROM "employees" WHERE "employees"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mEmployee Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "employees"[0m
EmployeesControllerTest - test_should_destroy_employee: NoMethodError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
--------------------------------------------
ShiftsControllerTest: test_should_show_shift
--------------------------------------------
  [1m[36mShift Load (0.2ms)[0m  [1m[34mSELECT "shifts".* FROM "shifts" WHERE "shifts"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
----------------------------------------------
ShiftsControllerTest: test_should_update_shift
----------------------------------------------
  [1m[36mShift Load (0.3ms)[0m  [1m[34mSELECT "shifts".* FROM "shifts" WHERE "shifts"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
-------------------------------------------
ShiftsControllerTest: test_should_get_index
-------------------------------------------
  [1m[36mShift Load (0.2ms)[0m  [1m[34mSELECT "shifts".* FROM "shifts" WHERE "shifts"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
----------------------------------------------
ShiftsControllerTest: test_should_create_shift
----------------------------------------------
  [1m[36mShift Load (0.2ms)[0m  [1m[34mSELECT "shifts".* FROM "shifts" WHERE "shifts"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mShift Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "shifts"[0m
ShiftsControllerTest - test_should_create_shift: NameError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
-----------------------------------------------
ShiftsControllerTest: test_should_destroy_shift
-----------------------------------------------
  [1m[36mShift Load (0.4ms)[0m  [1m[34mSELECT "shifts".* FROM "shifts" WHERE "shifts"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mShift Count (0.3ms)[0m  [1m[34mSELECT COUNT(*) FROM "shifts"[0m
ShiftsControllerTest - test_should_destroy_shift: NoMethodError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
------------------------------------------------
RequestsControllerTest: test_should_show_request
------------------------------------------------
  [1m[36mRequest Load (0.2ms)[0m  [1m[34mSELECT "requests".* FROM "requests" WHERE "requests"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
--------------------------------------------------
RequestsControllerTest: test_should_update_request
--------------------------------------------------
  [1m[36mRequest Load (0.3ms)[0m  [1m[34mSELECT "requests".* FROM "requests" WHERE "requests"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
---------------------------------------------
RequestsControllerTest: test_should_get_index
---------------------------------------------
  [1m[36mRequest Load (0.3ms)[0m  [1m[34mSELECT "requests".* FROM "requests" WHERE "requests"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
--------------------------------------------------
RequestsControllerTest: test_should_create_request
--------------------------------------------------
  [1m[36mRequest Load (0.2ms)[0m  [1m[34mSELECT "requests".* FROM "requests" WHERE "requests"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mRequest Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "requests"[0m
RequestsControllerTest - test_should_create_request: NameError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
---------------------------------------------------
RequestsControllerTest: test_should_destroy_request
---------------------------------------------------
  [1m[36mRequest Load (0.2ms)[0m  [1m[34mSELECT "requests".* FROM "requests" WHERE "requests"."id" = $1 LIMIT $2[0m  [["id", 980190962], ["LIMIT", 1]]
  [1m[36mRequest Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "requests"[0m
RequestsControllerTest - test_should_destroy_request: NoMethodError raised.
If you expected this exception, use `assert_raises` as near to the code that raises as possible.
Other block based assertions (e.g. `assert_difference`) can be used, as long as `assert_raises` is inside their block.

  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK[0m
